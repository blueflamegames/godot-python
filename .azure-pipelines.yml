# See https://aka.ms/yaml for documentation

trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'


variables: {PYTHON_VERSION: "3.7", GODOT_BINARY_VERSION: "3.2.3"}


jobs:


#################################################################################


- job: 'qa'
  displayName: 'Q&A'
  timeoutInMinutes: 5
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(PYTHON_VERSION)
  - bash: |
      set -eux
      python --version
      pip install pre-commit
    displayName: 'Bootstrap'
  - bash: |
      pre-commit run --all-files --show-diff-on-failure
    displayName: 'Pre-commit hooks check'


#################################################################################


- job: 'Windows'
  timeoutInMinutes: 60
  pool:
    vmImage: 'windows-latest'
  strategy:
    matrix:
      "64bits":
        PLATFORM: 'windows-64'
        python.arch: 'x64'
        vs.arch: 'amd64'
      "32bits":
        PLATFORM: 'windows-32'
        python.arch: 'x86'
        vs.arch: 'x86'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(PYTHON_VERSION)
      architecture: '$(python.arch)'
  - bash: |
      set -eux
      python --version
      python -m pip install --user -U pip
      python -m pip install --user -r requirements.txt
      # Configuration for scons
      echo 'godot_binary = "$(GODOT_BINARY_VERSION)"' >> custom.py
      echo 'platform = "$(PLATFORM)"' >> custom.py
      echo 'MSVC_USE_SCRIPT = True' >> custom.py
      echo 'TARGET_ARCH = "$(vs.arch)"' >> custom.py
      echo 'CC = "cl.exe"' >> custom.py
    displayName: 'Setup venv'
  - bash: |
      set -eux
      scons build -j2
    displayName: 'Build project'
  - bash: |
      set -eux
      # Azure pipelines doesn't provide a GPU with an OpenGL driver,
      # hence we use Mesa3D as software OpenGL driver
      pushd build/$(PLATFORM)/platforms/
      if [ "$(PLATFORM)" = "windows-64" ]
      then
        curl https://downloads.fdossena.com/Projects/Mesa3D/Builds/MesaForWindows-x64-20.0.7.7z -o mesa.7z
      else
        curl https://downloads.fdossena.com/Projects/Mesa3D/Builds/MesaForWindows-20.0.7.7z -o mesa.7z
      fi
      # opengl32.dll must be extracted in the same directory than Godot binary
      7z.exe x mesa.7z
      ls -lh opengl32.dll  # Sanity check
      popd
    displayName: 'Install Mesa3D OpenGL'
  - bash: |
      set -eux
      scons tests
    displayName: 'Run tests'
  - powershell: |
      scons release
      cp build/godot-python-*.zip $(Build.ArtifactStagingDirectory)
    displayName: 'Generate artifact archive'
  - task: GithubRelease@0
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    inputs:
      gitHubConnection: 'github.com_touilleMan'
      repositoryName: 'touilleMan/godot-python'
      action: 'edit'
      target: '$(build.sourceVersion)'
      tagSource: 'manual'
      tag: '$(Build.SourceBranchName)'
      assets: '$(Build.ArtifactStagingDirectory)/godot-python-*.zip'
      title: '$(Build.SourceBranchName)'
      assetUploadMode: 'replace'
      addChangeLog: false


#################################################################################


- job: 'Linux'
  timeoutInMinutes: 60
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    CC: clang
    PLATFORM: 'x11-64'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(PYTHON_VERSION)
  - bash: |
      set -eux
      $CC --version
      python --version
      pip install -U pip
      pip install -r requirements.txt
      # Configuration for scons
      echo 'godot_binary = "$(GODOT_BINARY_VERSION)"' >> custom.py
      echo 'platform = "$(PLATFORM)"' >> custom.py
      echo 'CC = "$(CC)"' >> custom.py
    displayName: 'Setup venv'
  - bash: |
      set -eux
      scons build -j2
    displayName: 'Build project'
  - bash: |
      /usr/bin/Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
      echo ">>> Started xvfb"
    displayName: 'Start xvfb'
  - bash: |
      set -eux
      scons tests headless=true
    displayName: 'Run tests'
    env:
      DISPLAY: ':99.0'
  - bash: |
      set -eux
      scons release
      cp build/godot-python-*.tar.bz2 $(Build.ArtifactStagingDirectory)/
    displayName: 'Generate artifact archive'
  - task: GithubRelease@0
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    inputs:
      gitHubConnection: 'github.com_touilleMan'
      repositoryName: 'touilleMan/godot-python'
      action: 'edit'
      target: '$(build.sourceVersion)'
      tagSource: 'manual'
      tag: '$(Build.SourceBranchName)'
      assets: '$(Build.ArtifactStagingDirectory)/godot-python-*.tar.bz2'
      title: '$(Build.SourceBranchName)'
      assetUploadMode: 'replace'
      addChangeLog: false


#################################################################################


- job: 'macOS'
  timeoutInMinutes: 60
  pool:
    vmImage: 'macOS-latest'
  variables:
    CC: clang
    PLATFORM: 'osx-64'
  steps:
  - checkout: self
    submodules: true
  - task: UsePythonVersion@0
    inputs:
      versionSpec: $(PYTHON_VERSION)
  - bash: |
      set -eux
      $CC --version
      python --version
      brew update
      brew install zlib openssl
      brew install --cask xquartz
      pip install -U pip
      pip install -r requirements.txt
      # Configuration for scons
      echo 'godot_binary = "$(GODOT_BINARY_VERSION)"' >> custom.py
      echo 'platform = "$(PLATFORM)"' >> custom.py
      echo 'CC = "$(CC)"' >> custom.py
    displayName: 'Setup venv'
  - bash: |
      set -eux
      scons build -j2
    displayName: 'Build project'
  - bash: |
      set -eux
      scons tests
    displayName: 'Run tests'
  - bash: |
      set -eux
      scons release
      cp build/godot-python-*.tar.bz2 $(Build.ArtifactStagingDirectory)/
    displayName: 'Generate artifact archive'
  - task: GithubRelease@0
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    inputs:
      gitHubConnection: 'github.com_touilleMan'
      repositoryName: 'touilleMan/godot-python'
      action: 'edit'
      target: '$(build.sourceVersion)'
      tagSource: 'manual'
      tag: '$(Build.SourceBranchName)'
      assets: '$(Build.ArtifactStagingDirectory)/godot-python-*.tar.bz2'
      title: '$(Build.SourceBranchName)'
      assetUploadMode: 'replace'
      addChangeLog: false
